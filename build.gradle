plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.3.4"
    id 'checkstyle'
}

version = "0.1"
group = "ru.mirea"

repositories {
    mavenCentral()
}

micronaut {
    runtime("undertow")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("ru.mirea.*")
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.18'
    compileOnly 'org.projectlombok:lombok:1.18.18'
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("javax.annotation:javax.annotation-api")
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.7.1'
    implementation("org.apache.logging.log4j:log4j-core:2.12.1")
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.12.1")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.12.1")
}


application {
    mainClass.set("ru.mirea.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

compileJava {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs += ["-Xlint:all"]
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs += ["-Xlint:all"]
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
}

shadowJar {
    archivesBaseName = "${project.name}"
    libsDirName = "${project.name}"
    classifier('')
}

sourceSets {
    main {
        java {
            srcDirs = ['.gradle', 'build']
            exclude '/**'
        }
    }
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source ='src/test/java'
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()

    if (System.env.CI == 'true') {
        testLogging.showStandardStreams = true
        minHeapSize "1g"
        maxHeapSize "1g"
    }

    systemProperty 'java.io.tmpdir', buildDir.absolutePath

    // Required to test configuration cache in tests when using withDebug()
    // https://github.com/gradle/gradle/issues/22765#issuecomment-1339427241
    jvmArgs(
            "--add-opens",
            "java.base/java.util=ALL-UNNAMED",
            "--add-opens",
            "java.base/java.util.concurrent.atomic=ALL-UNNAMED",
            "--add-opens",
            "java.base/java.lang.invoke=ALL-UNNAMED",
            "--add-opens",
            "java.base/java.net=ALL-UNNAMED",
    )
}

